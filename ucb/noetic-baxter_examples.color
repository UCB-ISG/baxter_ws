 cfg/JointSpringsExample.cfg               |  2 [32m+[m[31m-[m
 scripts/analog_io_rampup.py               | 10 [32m+++++[m[31m-----[m
 scripts/digital_io_blink.py               |  8 [32m++++[m[31m----[m
 scripts/gripper_action_client.py          |  6 [32m+++[m[31m---[m
 scripts/gripper_cuff_control.py           |  2 [32m+[m[31m-[m
 scripts/gripper_joystick.py               |  4 [32m++[m[31m--[m
 scripts/gripper_keyboard.py               |  4 [32m++[m[31m--[m
 scripts/head_action_client.py             |  6 [32m+++[m[31m---[m
 scripts/head_wobbler.py                   |  2 [32m+[m[31m-[m
 scripts/ik_service_client.py              | 12 [32m++++++[m[31m------[m
 scripts/joint_position_file_playback.py   |  8 [32m++++[m[31m----[m
 scripts/joint_position_joystick.py        |  2 [32m+[m[31m-[m
 scripts/joint_position_keyboard.py        |  4 [32m++[m[31m--[m
 scripts/joint_position_waypoints.py       |  2 [32m+[m[31m-[m
 scripts/joint_recorder.py                 |  2 [32m+[m[31m-[m
 scripts/joint_torque_springs.py           |  4 [32m++[m[31m--[m
 scripts/joint_trajectory_client.py        |  2 [32m+[m[31m-[m
 scripts/joint_trajectory_file_playback.py | 10 [32m+++++[m[31m-----[m
 scripts/joint_velocity_puppet.py          |  8 [32m++++[m[31m----[m
 scripts/joint_velocity_wobbler.py         |  4 [32m++[m[31m--[m
 scripts/navigator_io.py                   | 14 [32m+++++++[m[31m-------[m
 scripts/send_urdf_fragment.py             |  2 [32m+[m[31m-[m
 scripts/xdisplay_image.py                 |  2 [32m+[m[31m-[m
 setup.py                                  |  2 [32m+[m[31m-[m
 src/baxter_external_devices/getch.py      |  2 [32m+[m[31m-[m
 src/baxter_external_devices/joystick.py   |  2 [32m+[m[31m-[m
 26 files changed, 63 insertions(+), 63 deletions(-)

[1mdiff --git a/cfg/JointSpringsExample.cfg b/cfg/JointSpringsExample.cfg[m
[1mindex b98faa5..4feb664 100755[m
[1m--- a/cfg/JointSpringsExample.cfg[m
[1m+++ b/cfg/JointSpringsExample.cfg[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[1mdiff --git a/scripts/analog_io_rampup.py b/scripts/analog_io_rampup.py[m
[1mindex 1709416..09413fe 100755[m
[1m--- a/scripts/analog_io_rampup.py[m
[1m+++ b/scripts/analog_io_rampup.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -42,20 +42,20 @@[m [mdef test_interface(io_component='torso_fan'):[m
     rate = rospy.Rate(2)[m
 [m
     # start: 0.0[m
[31m-    print b.state()[m
[32m+[m[32m    print(b.state())[m
 [m
     # ramp up[m
     for i in range(0, 101, 10):[m
         b.set_output(i)[m
[31m-        print i[m
[32m+[m[32m        print(i)[m
         rate.sleep()[m
     # max: 100.0[m
[31m-    print b.state()[m
[32m+[m[32m    print(b.state())[m
 [m
     # ramp down[m
     for i in range(100, -1, -10):[m
         b.set_output(i)[m
[31m-        print i[m
[32m+[m[32m        print(i)[m
         rate.sleep()[m
     # (fans off)[m
     b.set_output(0)[m
[1mdiff --git a/scripts/digital_io_blink.py b/scripts/digital_io_blink.py[m
[1mindex f679cb9..26c17c3 100755[m
[1m--- a/scripts/digital_io_blink.py[m
[1m+++ b/scripts/digital_io_blink.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -39,17 +39,17 @@[m [mdef test_interface(io_component='left_outer_light'):[m
     rospy.loginfo("Blinking Digital Output: %s", io_component)[m
     b = DIO.DigitalIO(io_component)[m
 [m
[31m-    print "Initial state: ", b.state[m
[32m+[m[32m    print("Initial state: ", b.state)[m
 [m
     # turn on light[m
     b.set_output(True)[m
     rospy.sleep(1)[m
[31m-    print "New state: ", b.state[m
[32m+[m[32m    print("New state: ", b.state)[m
 [m
     # reset output[m
     b.set_output(False)[m
     rospy.sleep(1)[m
[31m-    print "Final state:", b.state[m
[32m+[m[32m    print("Final state:", b.state)[m
 [m
 [m
 def main():[m
[1mdiff --git a/scripts/gripper_action_client.py b/scripts/gripper_action_client.py[m
[1mindex 935d2b6..5cd4bf7 100755[m
[1m--- a/scripts/gripper_action_client.py[m
[1m+++ b/scripts/gripper_action_client.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -122,8 +122,8 @@[m [mdef main():[m
     gc.command(position=0.0, effort=30.0)[m
     gc.wait()[m
     gc.command(position=100.0, effort=40.0)[m
[31m-    print gc.wait()[m
[31m-    print "Exiting - Gripper Action Test Example Complete"[m
[32m+[m[32m    print(gc.wait())[m
[32m+[m[32m    print("Exiting - Gripper Action Test Example Complete")[m
 [m
 if __name__ == "__main__":[m
     main()[m
[1mdiff --git a/scripts/gripper_cuff_control.py b/scripts/gripper_cuff_control.py[m
[1mindex facac66..e460c2e 100755[m
[1m--- a/scripts/gripper_cuff_control.py[m
[1m+++ b/scripts/gripper_cuff_control.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/python2[m
[32m+[m[32m#!/usr/bin/python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[1mdiff --git a/scripts/gripper_joystick.py b/scripts/gripper_joystick.py[m
[1mindex 58a539c..17a9c4b 100755[m
[1m--- a/scripts/gripper_joystick.py[m
[1m+++ b/scripts/gripper_joystick.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -81,7 +81,7 @@[m [mdef map_joystick(joystick):[m
     def capability_warning(gripper, cmd):[m
         msg = ("%s %s - not capable of '%s' command" %[m
                (gripper.name, gripper.type(), cmd))[m
[31m-        print msg[m
[32m+[m[32m        print(msg)[m
 [m
     def offset_position(gripper, offset):[m
         if gripper.type() != 'electric':[m
[1mdiff --git a/scripts/gripper_keyboard.py b/scripts/gripper_keyboard.py[m
[1mindex f631677..cf342a3 100755[m
[1m--- a/scripts/gripper_keyboard.py[m
[1m+++ b/scripts/gripper_keyboard.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -150,7 +150,7 @@[m [mdef map_keyboard():[m
                 print("key bindings: ")[m
                 print("  Esc: Quit")[m
                 print("  ?: Help")[m
[31m-                for key, val in sorted(bindings.items(),[m
[32m+[m[32m                for key, val in sorted(list(bindings.items()),[m
                                        key=lambda x: x[1][2]):[m
                     print("  %s: %s" % (key, val[2]))[m
     # force shutdown call if caught by key handler[m
[1mdiff --git a/scripts/head_action_client.py b/scripts/head_action_client.py[m
[1mindex 206b8fc..e5dbcf8 100755[m
[1m--- a/scripts/head_action_client.py[m
[1m+++ b/scripts/head_action_client.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -110,8 +110,8 @@[m [mdef main():[m
     hc.command(position=-1.0, velocity=0.4)[m
     hc.wait()[m
     hc.command(position=0.0, velocity=0.6)[m
[31m-    print hc.wait()[m
[31m-    print "Exiting - Head Action Test Example Complete"[m
[32m+[m[32m    print(hc.wait())[m
[32m+[m[32m    print("Exiting - Head Action Test Example Complete")[m
 [m
 if __name__ == "__main__":[m
     main()[m
[1mdiff --git a/scripts/head_wobbler.py b/scripts/head_wobbler.py[m
[1mindex 6d1e929..7bc685a 100755[m
[1m--- a/scripts/head_wobbler.py[m
[1m+++ b/scripts/head_wobbler.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[1mdiff --git a/scripts/ik_service_client.py b/scripts/ik_service_client.py[m
[1mindex d9850bb..3e9eae3 100755[m
[1m--- a/scripts/ik_service_client.py[m
[1m+++ b/scripts/ik_service_client.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -95,7 +95,7 @@[m [mdef ik_test(limb):[m
     try:[m
         rospy.wait_for_service(ns, 5.0)[m
         resp = iksvc(ikreq)[m
[31m-    except (rospy.ServiceException, rospy.ROSException), e:[m
[32m+[m[32m    except (rospy.ServiceException, rospy.ROSException) as e:[m
         rospy.logerr("Service call failed: %s" % (e,))[m
         return 1[m
 [m
[36m@@ -112,10 +112,10 @@[m [mdef ik_test(limb):[m
         print("SUCCESS - Valid Joint Solution Found from Seed Type: %s" %[m
               (seed_str,))[m
         # Format solution into Limb API-compatible dictionary[m
[31m-        limb_joints = dict(zip(resp.joints[0].name, resp.joints[0].position))[m
[31m-        print "\nIK Joint Solution:\n", limb_joints[m
[31m-        print "------------------"[m
[31m-        print "Response Message:\n", resp[m
[32m+[m[32m        limb_joints = dict(list(zip(resp.joints[0].name, resp.joints[0].position)))[m
[32m+[m[32m        print("\nIK Joint Solution:\n", limb_joints)[m
[32m+[m[32m        print("------------------")[m
[32m+[m[32m        print("Response Message:\n", resp)[m
     else:[m
         print("INVALID POSE - No Valid Joint Solution Found.")[m
 [m
[1mdiff --git a/scripts/joint_position_file_playback.py b/scripts/joint_position_file_playback.py[m
[1mindex 2ab2b30..4b347c6 100755[m
[1m--- a/scripts/joint_position_file_playback.py[m
[1m+++ b/scripts/joint_position_file_playback.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -57,14 +57,14 @@[m [mdef clean_line(line, names):[m
     #convert the line of strings to a float or None[m
     line = [try_float(x) for x in line.rstrip().split(',')][m
     #zip the values with the joint names[m
[31m-    combined = zip(names[1:], line[1:])[m
[32m+[m[32m    combined = list(zip(names[1:], line[1:]))[m
     #take out any tuples that have a none value[m
     cleaned = [x for x in combined if x[1] is not None][m
     #convert it to a dictionary with only valid commands[m
     command = dict(cleaned)[m
[31m-    left_command = dict((key, command[key]) for key in command.keys()[m
[32m+[m[32m    left_command = dict((key, command[key]) for key in list(command.keys())[m
                         if key[:-2] == 'left_')[m
[31m-    right_command = dict((key, command[key]) for key in command.keys()[m
[32m+[m[32m    right_command = dict((key, command[key]) for key in list(command.keys())[m
                          if key[:-2] == 'right_')[m
     return (command, left_command, right_command, line)[m
 [m
[1mdiff --git a/scripts/joint_position_joystick.py b/scripts/joint_position_joystick.py[m
[1mindex b7f86ae..0a172c2 100755[m
[1m--- a/scripts/joint_position_joystick.py[m
[1m+++ b/scripts/joint_position_joystick.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[1mdiff --git a/scripts/joint_position_keyboard.py b/scripts/joint_position_keyboard.py[m
[1mindex 7317cac..6779a3f 100755[m
[1m--- a/scripts/joint_position_keyboard.py[m
[1m+++ b/scripts/joint_position_keyboard.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -109,7 +109,7 @@[m [mdef map_keyboard():[m
                 print("key bindings: ")[m
                 print("  Esc: Quit")[m
                 print("  ?: Help")[m
[31m-                for key, val in sorted(bindings.items(),[m
[32m+[m[32m                for key, val in sorted(list(bindings.items()),[m
                                        key=lambda x: x[1][2]):[m
                     print("  %s: %s" % (key, val[2]))[m
 [m
[1mdiff --git a/scripts/joint_position_waypoints.py b/scripts/joint_position_waypoints.py[m
[1mindex 4992af6..ef816f6 100755[m
[1m--- a/scripts/joint_position_waypoints.py[m
[1m+++ b/scripts/joint_position_waypoints.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[1mdiff --git a/scripts/joint_recorder.py b/scripts/joint_recorder.py[m
[1mindex 1f86062..02f1c89 100755[m
[1m--- a/scripts/joint_recorder.py[m
[1m+++ b/scripts/joint_recorder.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[1mdiff --git a/scripts/joint_torque_springs.py b/scripts/joint_torque_springs.py[m
[1mindex 20f0fa7..64fc632 100755[m
[1m--- a/scripts/joint_torque_springs.py[m
[1m+++ b/scripts/joint_torque_springs.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -112,7 +112,7 @@[m [mclass JointSprings(object):[m
         cur_pos = self._limb.joint_angles()[m
         cur_vel = self._limb.joint_velocities()[m
         # calculate current forces[m
[31m-        for joint in self._start_angles.keys():[m
[32m+[m[32m        for joint in list(self._start_angles.keys()):[m
             # spring portion[m
             cmd[joint] = self._springs[joint] * (self._start_angles[joint] -[m
                                                    cur_pos[joint])[m
[1mdiff --git a/scripts/joint_trajectory_client.py b/scripts/joint_trajectory_client.py[m
[1mindex 0b2f0ef..e5cf607 100755[m
[1m--- a/scripts/joint_trajectory_client.py[m
[1m+++ b/scripts/joint_trajectory_client.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[1mdiff --git a/scripts/joint_trajectory_file_playback.py b/scripts/joint_trajectory_file_playback.py[m
[1mindex 4131297..7814d4b 100755[m
[1m--- a/scripts/joint_trajectory_file_playback.py[m
[1m+++ b/scripts/joint_trajectory_file_playback.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -157,7 +157,7 @@[m [mclass Trajectory(object):[m
         #convert the line of strings to a float or None[m
         line = [try_float(x) for x in line.rstrip().split(',')][m
         #zip the values with the joint names[m
[31m-        combined = zip(joint_names[1:], line[1:])[m
[32m+[m[32m        combined = list(zip(joint_names[1:], line[1:]))[m
         #take out any tuples that have a none value[m
         cleaned = [x for x in combined if x[1] is not None][m
         #convert it to a dictionary with only valid commands[m
[36m@@ -222,10 +222,10 @@[m [mclass Trajectory(object):[m
                     cur.append(self._r_arm.joint_angle(name))[m
                     prm = rospy.get_param(vel_param % name, 0.25)[m
                     dflt_vel.append(prm)[m
[31m-            diffs = map(operator.sub, cmd, cur)[m
[31m-            diffs = map(operator.abs, diffs)[m
[32m+[m[32m            diffs = list(map(operator.sub, cmd, cur))[m
[32m+[m[32m            diffs = list(map(operator.abs, diffs))[m
             #determine the largest time offset necessary across all joints[m
[31m-            offset = max(map(operator.div, diffs, dflt_vel))[m
[32m+[m[32m            offset = max(list(map(operator.div, diffs, dflt_vel)))[m
             return offset[m
 [m
         for idx, values in enumerate(lines[1:]):[m
[1mdiff --git a/scripts/joint_velocity_puppet.py b/scripts/joint_velocity_puppet.py[m
[1mindex d2d59d8..2e0f6c2 100755[m
[1m--- a/scripts/joint_velocity_puppet.py[m
[1m+++ b/scripts/joint_velocity_puppet.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -65,7 +65,7 @@[m [mclass Puppeteer(object):[m
 [m
     def _reset_control_modes(self):[m
         rate = rospy.Rate(100)[m
[31m-        for _ in xrange(100):[m
[32m+[m[32m        for _ in range(100):[m
             if rospy.is_shutdown():[m
                 return False[m
             self._control_arm.exit_control_mode()[m
[36m@@ -101,9 +101,9 @@[m [mclass Puppeteer(object):[m
         control_joint_names = self._control_arm.joint_names()[m
         puppet_joint_names = self._puppet_arm.joint_names()[m
 [m
[31m-        print ("Puppeting:\n"[m
[32m+[m[32m        print("Puppeting:\n"[m
               "  Grab %s cuff and move arm.\n"[m
[31m-              "  Press Ctrl-C to stop...") % (self._control_limb,)[m
[32m+[m[32m              "  Press Ctrl-C to stop..." % (self._control_limb,))[m
         while not rospy.is_shutdown():[m
             cmd = {}[m
             for idx, name in enumerate(puppet_joint_names):[m
[1mdiff --git a/scripts/joint_velocity_wobbler.py b/scripts/joint_velocity_wobbler.py[m
[1mindex 4e9d80f..4a4b73b 100755[m
[1m--- a/scripts/joint_velocity_wobbler.py[m
[1m+++ b/scripts/joint_velocity_wobbler.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -69,7 +69,7 @@[m [mclass Wobbler(object):[m
 [m
     def _reset_control_modes(self):[m
         rate = rospy.Rate(self._rate)[m
[31m-        for _ in xrange(100):[m
[32m+[m[32m        for _ in range(100):[m
             if rospy.is_shutdown():[m
                 return False[m
             self._left_arm.exit_control_mode()[m
[1mdiff --git a/scripts/navigator_io.py b/scripts/navigator_io.py[m
[1mindex 5f3ffa8..d59f957 100755[m
[1m--- a/scripts/navigator_io.py[m
[1m+++ b/scripts/navigator_io.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/python2[m
[32m+[m[32m#!/usr/bin/python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[36m@@ -42,7 +42,7 @@[m [mdef blink():[m
         baxter_interface.Navigator('torso_left'),[m
         baxter_interface.Navigator('torso_right'),)[m
 [m
[31m-    print ("Blinking LED's for 10 seconds")[m
[32m+[m[32m    print("Blinking LED's for 10 seconds")[m
     rate = rospy.Rate(10)[m
     i = 0[m
     while not rospy.is_shutdown() and i < 100:[m
[36m@@ -55,16 +55,16 @@[m [mdef blink():[m
 [m
 def echo_input():[m
     def b0_pressed(v):[m
[31m-        print ("Button 0: %s" % (v,))[m
[32m+[m[32m        print("Button 0: %s" % (v,))[m
 [m
     def b1_pressed(v):[m
[31m-        print ("Button 1: %s" % (v,))[m
[32m+[m[32m        print("Button 1: %s" % (v,))[m
 [m
     def b2_pressed(v):[m
[31m-        print ("Button 2: %s" % (v,))[m
[32m+[m[32m        print("Button 2: %s" % (v,))[m
 [m
     def wheel_moved(v):[m
[31m-        print ("Wheel Increment: %d, New Value: %s" % (v, nav.wheel))[m
[32m+[m[32m        print("Wheel Increment: %d, New Value: %s" % (v, nav.wheel))[m
 [m
     nav = baxter_interface.Navigator('left')[m
     nav.button0_changed.connect(b0_pressed)[m
[36m@@ -72,7 +72,7 @@[m [mdef echo_input():[m
     nav.button2_changed.connect(b2_pressed)[m
     nav.wheel_changed.connect(wheel_moved)[m
 [m
[31m-    print ("Press input buttons on the left navigator, "[m
[32m+[m[32m    print("Press input buttons on the left navigator, "[m
            "input will be echoed here.")[m
 [m
     rate = rospy.Rate(1)[m
[1mdiff --git a/scripts/send_urdf_fragment.py b/scripts/send_urdf_fragment.py[m
[1mindex cb5d8b5..ede1597 100755[m
[1m--- a/scripts/send_urdf_fragment.py[m
[1m+++ b/scripts/send_urdf_fragment.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/python2[m
[32m+[m[32m#!/usr/bin/python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[1mdiff --git a/scripts/xdisplay_image.py b/scripts/xdisplay_image.py[m
[1mindex e353820..f09cca1 100755[m
[1m--- a/scripts/xdisplay_image.py[m
[1m+++ b/scripts/xdisplay_image.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/python2[m
[32m+[m[32m#!/usr/bin/python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
[1mdiff --git a/setup.py b/setup.py[m
[1mindex 7434836..6b3e976 100644[m
[1m--- a/setup.py[m
[1m+++ b/setup.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 from distutils.core import setup[m
 from catkin_pkg.python_setup import generate_distutils_setup[m
 [m
[1mdiff --git a/src/baxter_external_devices/getch.py b/src/baxter_external_devices/getch.py[m
[1mindex c6c95c5..143ae77 100644[m
[1m--- a/src/baxter_external_devices/getch.py[m
[1m+++ b/src/baxter_external_devices/getch.py[m
[36m@@ -52,7 +52,7 @@[m [mdef getch(timeout=0.01):[m
         if fileno in rlist:[m
             ch = sys.stdin.read(1)[m
     except Exception as ex:[m
[31m-        print "getch", ex[m
[32m+[m[32m        print("getch", ex)[m
         raise OSError[m
     finally:[m
         termios.tcsetattr(fileno, termios.TCSADRAIN, old_settings)[m
[1mdiff --git a/src/baxter_external_devices/joystick.py b/src/baxter_external_devices/joystick.py[m
[1mindex cc0475d..c637d1b 100644[m
[1m--- a/src/baxter_external_devices/joystick.py[m
[1m+++ b/src/baxter_external_devices/joystick.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-#!/usr/bin/env python[m
[32m+[m[32m#!/usr/bin/env python3[m
 [m
 # Copyright (c) 2013-2015, Rethink Robotics[m
 # All rights reserved.[m
