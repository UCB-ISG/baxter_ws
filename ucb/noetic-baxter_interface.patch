 cfg/GripperActionServer.cfg                        |  2 +-
 cfg/HeadActionServer.cfg                           |  2 +-
 cfg/PositionFFJointTrajectoryActionServer.cfg      |  2 +-
 cfg/PositionJointTrajectoryActionServer.cfg        |  2 +-
 cfg/VelocityJointTrajectoryActionServer.cfg        |  2 +-
 scripts/gripper_action_server.py                   |  2 +-
 scripts/head_action_server.py                      |  2 +-
 scripts/joint_trajectory_action_server.py          |  2 +-
 setup.py                                           |  2 +-
 src/baxter_dataflow/signals.py                     |  4 +-
 src/baxter_dataflow/weakrefset.py                  |  2 +-
 src/baxter_interface/analog_io.py                  |  2 +-
 src/baxter_interface/camera.py                     |  2 +-
 src/baxter_interface/gripper.py                    |  4 +-
 src/baxter_interface/limb.py                       | 26 ++++++------
 src/baxter_interface/robot_enable.py               |  2 +-
 src/baxter_interface/robust_controller.py          |  2 +-
 src/joint_trajectory_action/bezier.py              |  8 ++--
 .../joint_trajectory_action.py                     | 48 +++++++++++-----------
 19 files changed, 59 insertions(+), 59 deletions(-)

diff --git a/cfg/GripperActionServer.cfg b/cfg/GripperActionServer.cfg
index cdc790e..f5424a6 100755
--- a/cfg/GripperActionServer.cfg
+++ b/cfg/GripperActionServer.cfg
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Copyright (c) 2013-2015, Rethink Robotics
 # All rights reserved.
diff --git a/cfg/HeadActionServer.cfg b/cfg/HeadActionServer.cfg
index 0cf31d6..4e19d5c 100755
--- a/cfg/HeadActionServer.cfg
+++ b/cfg/HeadActionServer.cfg
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Copyright (c) 2013-2015, Rethink Robotics
 # All rights reserved.
diff --git a/cfg/PositionFFJointTrajectoryActionServer.cfg b/cfg/PositionFFJointTrajectoryActionServer.cfg
index 285db27..ffca778 100755
--- a/cfg/PositionFFJointTrajectoryActionServer.cfg
+++ b/cfg/PositionFFJointTrajectoryActionServer.cfg
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Copyright (c) 2013-2015, Rethink Robotics
 # All rights reserved.
diff --git a/cfg/PositionJointTrajectoryActionServer.cfg b/cfg/PositionJointTrajectoryActionServer.cfg
index 7a13c60..aad283e 100755
--- a/cfg/PositionJointTrajectoryActionServer.cfg
+++ b/cfg/PositionJointTrajectoryActionServer.cfg
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Copyright (c) 2013-2015, Rethink Robotics
 # All rights reserved.
diff --git a/cfg/VelocityJointTrajectoryActionServer.cfg b/cfg/VelocityJointTrajectoryActionServer.cfg
index 13a67a3..9060f19 100755
--- a/cfg/VelocityJointTrajectoryActionServer.cfg
+++ b/cfg/VelocityJointTrajectoryActionServer.cfg
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Copyright (c) 2013-2015, Rethink Robotics
 # All rights reserved.
diff --git a/scripts/gripper_action_server.py b/scripts/gripper_action_server.py
index b10302e..196b55e 100755
--- a/scripts/gripper_action_server.py
+++ b/scripts/gripper_action_server.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Copyright (c) 2013-2015, Rethink Robotics
 # All rights reserved.
diff --git a/scripts/head_action_server.py b/scripts/head_action_server.py
index 02a209e..fa48e5f 100755
--- a/scripts/head_action_server.py
+++ b/scripts/head_action_server.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Copyright (c) 2013-2015, Rethink Robotics
 # All rights reserved.
diff --git a/scripts/joint_trajectory_action_server.py b/scripts/joint_trajectory_action_server.py
index d19b23b..4487fcb 100755
--- a/scripts/joint_trajectory_action_server.py
+++ b/scripts/joint_trajectory_action_server.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Copyright (c) 2013-2015, Rethink Robotics
 # All rights reserved.
diff --git a/setup.py b/setup.py
index 2820dac..13de6eb 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 from distutils.core import setup
 from catkin_pkg.python_setup import generate_distutils_setup
 
diff --git a/src/baxter_dataflow/signals.py b/src/baxter_dataflow/signals.py
index 4267357..cad2537 100644
--- a/src/baxter_dataflow/signals.py
+++ b/src/baxter_dataflow/signals.py
@@ -31,7 +31,7 @@ from weakref import WeakKeyDictionary
 try:
     from weakref import WeakSet
 except ImportError:
-    from weakrefset import WeakSet
+    from .weakrefset import WeakSet
 
 
 class Signal(object):
@@ -43,7 +43,7 @@ class Signal(object):
         for f in self._functions:
             f(*args, **kargs)
 
-        for obj, functions in self._methods.items():
+        for obj, functions in list(self._methods.items()):
             for f in functions:
                 f(obj, *args, **kargs)
 
diff --git a/src/baxter_dataflow/weakrefset.py b/src/baxter_dataflow/weakrefset.py
index 6ab9c0c..b093709 100644
--- a/src/baxter_dataflow/weakrefset.py
+++ b/src/baxter_dataflow/weakrefset.py
@@ -5,7 +5,7 @@
 # http://www.voidspace.org.uk/python/license.shtml
 # https://pypi.python.org/pypi/weakrefset
 
-from __future__ import with_statement
+
 
 from _weakref import ref
 
diff --git a/src/baxter_interface/analog_io.py b/src/baxter_interface/analog_io.py
index b1260ab..48fe906 100644
--- a/src/baxter_interface/analog_io.py
+++ b/src/baxter_interface/analog_io.py
@@ -69,7 +69,7 @@ class AnalogIO(object):
             self._on_io_state)
 
         baxter_dataflow.wait_for(
-            lambda: len(self._state.keys()) != 0,
+            lambda: len(list(self._state.keys())) != 0,
             timeout=2.0,
             timeout_msg="Failed to get current analog_io state from %s" \
             % (topic_base,),
diff --git a/src/baxter_interface/camera.py b/src/baxter_interface/camera.py
index ea2b57e..98db4f1 100644
--- a/src/baxter_interface/camera.py
+++ b/src/baxter_interface/camera.py
@@ -255,7 +255,7 @@ class CameraController(object):
         x = self._get_value(CameraControl.CAMERA_CONTROL_WINDOW_X,
                             self.CONTROL_AUTO)
         if (x == self.CONTROL_AUTO):
-            return (tuple(map(lambda x: x / 2, self.resolution)) if
+            return (tuple([x / 2 for x in self.resolution]) if
             self.half_resolution else
             self.resolution)
         else:
diff --git a/src/baxter_interface/gripper.py b/src/baxter_interface/gripper.py
index 5f479a3..f0e8304 100644
--- a/src/baxter_interface/gripper.py
+++ b/src/baxter_interface/gripper.py
@@ -362,8 +362,8 @@ class Gripper(object):
             self._parameters = valid_parameters
         if parameters is None:
             parameters = dict()
-        for key in parameters.keys():
-            if key in valid_parameters.keys():
+        for key in list(parameters.keys()):
+            if key in list(valid_parameters.keys()):
                 self._parameters[key] = parameters[key]
             else:
                 msg = ("Invalid parameter: %s provided. %s" %
diff --git a/src/baxter_interface/limb.py b/src/baxter_interface/limb.py
index 0201c3d..956f826 100644
--- a/src/baxter_interface/limb.py
+++ b/src/baxter_interface/limb.py
@@ -107,7 +107,7 @@ class Limb(object):
             queue_size=1,
             tcp_nodelay=True)
 
-        joint_state_topic = 'robot/joint_states'
+        joint_state_topic = '/robot/joint_states'
         _joint_state_sub = rospy.Subscriber(
             joint_state_topic,
             JointState,
@@ -117,11 +117,11 @@ class Limb(object):
 
         err_msg = ("%s limb init failed to get current joint_states "
                    "from %s") % (self.name.capitalize(), joint_state_topic)
-        baxter_dataflow.wait_for(lambda: len(self._joint_angle.keys()) > 0,
+        baxter_dataflow.wait_for(lambda: len(list(self._joint_angle.keys())) > 0,
                                  timeout_msg=err_msg)
         err_msg = ("%s limb init failed to get current endpoint_state "
                    "from %s") % (self.name.capitalize(), ns + 'endpoint_state')
-        baxter_dataflow.wait_for(lambda: len(self._cartesian_pose.keys()) > 0,
+        baxter_dataflow.wait_for(lambda: len(list(self._cartesian_pose.keys())) > 0,
                                  timeout_msg=err_msg)
 
     def _on_joint_states(self, msg):
@@ -345,8 +345,8 @@ class Limb(object):
         @type raw: bool
         @param raw: advanced, direct position control mode
         """
-        self._command_msg.names = positions.keys()
-        self._command_msg.command = positions.values()
+        self._command_msg.names = list(positions.keys())
+        self._command_msg.command = list(positions.values())
         if raw:
             self._command_msg.mode = JointCommand.RAW_POSITION_MODE
         else:
@@ -365,8 +365,8 @@ class Limb(object):
         @type velocities: dict({str:float})
         @param velocities: joint_name:velocity command
         """
-        self._command_msg.names = velocities.keys()
-        self._command_msg.command = velocities.values()
+        self._command_msg.names = list(velocities.keys())
+        self._command_msg.command = list(velocities.values())
         self._command_msg.mode = JointCommand.VELOCITY_MODE
         self._pub_joint_cmd.publish(self._command_msg)
 
@@ -382,8 +382,8 @@ class Limb(object):
         @type torques: dict({str:float})
         @param torques: joint_name:torque command
         """
-        self._command_msg.names = torques.keys()
-        self._command_msg.command = torques.values()
+        self._command_msg.names = list(torques.keys())
+        self._command_msg.command = list(torques.values())
         self._command_msg.mode = JointCommand.TORQUE_MODE
         self._pub_joint_cmd.publish(self._command_msg)
 
@@ -398,8 +398,8 @@ class Limb(object):
         @type timeout: float
         @param timeout: seconds to wait for move to finish [15]
         """
-        angles = dict(zip(self.joint_names(),
-                          [0.0, -0.55, 0.0, 0.75, 0.0, 1.26, 0.0]))
+        angles = dict(list(zip(self.joint_names(),
+                          [0.0, -0.55, 0.0, 0.75, 0.0, 1.26, 0.0])))
         return self.move_to_joint_positions(angles, timeout)
 
     def move_to_joint_positions(self, positions, timeout=15.0,
@@ -425,7 +425,7 @@ class Limb(object):
 
         def filtered_cmd():
             # First Order Filter - 0.2 Hz Cutoff
-            for joint in positions.keys():
+            for joint in list(positions.keys()):
                 cmd[joint] = 0.012488 * positions[joint] + 0.98751 * cmd[joint]
             return cmd
 
@@ -434,7 +434,7 @@ class Limb(object):
                 return abs(angle - self._joint_angle[joint])
             return joint_diff
 
-        diffs = [genf(j, a) for j, a in positions.items() if
+        diffs = [genf(j, a) for j, a in list(positions.items()) if
                  j in self._joint_angle]
 
         self.set_joint_positions(filtered_cmd())
diff --git a/src/baxter_interface/robot_enable.py b/src/baxter_interface/robot_enable.py
index 78bf45f..c12ef50 100644
--- a/src/baxter_interface/robot_enable.py
+++ b/src/baxter_interface/robot_enable.py
@@ -164,7 +164,7 @@ http://sdk.rethinkrobotics.com/wiki/RSDK_Shell#Initialize
                 timeout_msg=error_env,
                 body=pub.publish
             )
-        except OSError, e:
+        except OSError as e:
             if e.errno == errno.ETIMEDOUT:
                 if self._state.error == True and self._state.stopped == False:
                     rospy.logwarn(error_nonfatal)
diff --git a/src/baxter_interface/robust_controller.py b/src/baxter_interface/robust_controller.py
index 5845229..ddfb13f 100644
--- a/src/baxter_interface/robust_controller.py
+++ b/src/baxter_interface/robust_controller.py
@@ -38,7 +38,7 @@ class RobustController(object):
     (STATE_IDLE,
      STATE_STARTING,
      STATE_RUNNING,
-     STATE_STOPPING) = range(4)
+     STATE_STOPPING) = list(range(4))
 
     def __init__(self, namespace, enable_msg, disable_msg, timeout=60):
         """
diff --git a/src/joint_trajectory_action/bezier.py b/src/joint_trajectory_action/bezier.py
index 37c2026..3120e07 100644
--- a/src/joint_trajectory_action/bezier.py
+++ b/src/joint_trajectory_action/bezier.py
@@ -1,4 +1,4 @@
-#! /usr/bin/python
+#! /usr/bin/python3
 # Software License Agreement (BSD License)
 #
 # Copyright (c) 2013-2015, Rethink Robotics
@@ -144,7 +144,7 @@ def de_boor_control_pts(points_array, d0=None,
             else:
                 x[N-2, 0] = 6*points_array[-2, col] - 1.5*dN[0, col]
                 x[0, 0] = 6*points_array[1, col] - 1.5*d0[0, col]
-            x[range(1, N-3+1), 0] = 6*points_array[range(2, N-2+1), col]
+            x[list(range(1, N-3+1)), 0] = 6*points_array[list(range(2, N-2+1)), col]
             # Solve bezier interpolation
             d_pts[2:N+1, col] = np.linalg.solve(A, x).T
         else:
@@ -298,7 +298,7 @@ def bezier_point(b_coeffs, b_index, t):
     else:
         t = 0.0 if t < 0.0 else t
         t = 1.0 if t > 1.0 else t
-        b_coeff_set = b_coeffs[:, b_index-1, range(4)]
+        b_coeff_set = b_coeffs[:, b_index-1, list(range(4))]
         b_point = _cubic_spline_point(b_coeff_set, t)
     return b_point
 
@@ -332,7 +332,7 @@ def bezier_curve(b_coeffs, num_intervals):
     # Copy out initial point
     b_curve[0, :] = b_coeffs[:, 0, 0]
     for current_bpt in range(num_bpts):
-            b_coeff_set = b_coeffs[:, current_bpt, range(4)]
+            b_coeff_set = b_coeffs[:, current_bpt, list(range(4))]
             for iteration, t in enumerate(np.linspace(interval, 1,
                                                       num_intervals)):
                 b_curve[(current_bpt *
diff --git a/src/joint_trajectory_action/joint_trajectory_action.py b/src/joint_trajectory_action/joint_trajectory_action.py
index 99b2171..cd2ab4d 100644
--- a/src/joint_trajectory_action/joint_trajectory_action.py
+++ b/src/joint_trajectory_action/joint_trajectory_action.py
@@ -34,7 +34,7 @@ import math
 import operator
 import numpy as np
 
-import bezier
+from . import bezier
 
 import rospy
 
@@ -191,8 +191,8 @@ class JointTrajectoryActionServer(object):
 
     def _get_current_error(self, joint_names, set_point):
         current = self._get_current_position(joint_names)
-        error = map(operator.sub, set_point, current)
-        return zip(joint_names, error)
+        error = list(map(operator.sub, set_point, current))
+        return list(zip(joint_names, error))
 
     def _update_feedback(self, cmd_point, jnt_names, cur_time):
         self._fdbk.header.stamp = rospy.Duration.from_sec(rospy.get_time())
@@ -201,34 +201,34 @@ class JointTrajectoryActionServer(object):
         self._fdbk.desired.time_from_start = rospy.Duration.from_sec(cur_time)
         self._fdbk.actual.positions = self._get_current_position(jnt_names)
         self._fdbk.actual.time_from_start = rospy.Duration.from_sec(cur_time)
-        self._fdbk.error.positions = map(operator.sub,
+        self._fdbk.error.positions = list(map(operator.sub,
                                          self._fdbk.desired.positions,
                                          self._fdbk.actual.positions
-                                        )
+                                        ))
         self._fdbk.error.time_from_start = rospy.Duration.from_sec(cur_time)
         self._server.publish_feedback(self._fdbk)
 
     def _reorder_joints_ff_cmd(self, joint_names, point):
-	joint_name_order = self._limb.joint_names()
-	pnt = JointTrajectoryPoint()
-	pnt.time_from_start = point.time_from_start
-	pos_cmd = dict(zip(joint_names, point.positions))
-	for jnt_name in joint_name_order:
-	    pnt.positions.append(pos_cmd[jnt_name])
+        joint_name_order = self._limb.joint_names()
+        pnt = JointTrajectoryPoint()
+        pnt.time_from_start = point.time_from_start
+        pos_cmd = dict(list(zip(joint_names, point.positions)))
+        for jnt_name in joint_name_order:
+            pnt.positions.append(pos_cmd[jnt_name])
         if point.velocities:
-	    vel_cmd = dict(zip(joint_names, point.velocities))
-	    for jnt_name in joint_name_order:
-	        pnt.velocities.append(vel_cmd[jnt_name])
+            vel_cmd = dict(list(zip(joint_names, point.velocities)))
+            for jnt_name in joint_name_order:
+                pnt.velocities.append(vel_cmd[jnt_name])
         if point.accelerations:
-	    accel_cmd = dict(zip(joint_names, point.accelerations))
-	    for jnt_name in joint_name_order:
-	        pnt.accelerations.append(accel_cmd[jnt_name])
+            accel_cmd = dict(list(zip(joint_names, point.accelerations)))
+            for jnt_name in joint_name_order:
+                pnt.accelerations.append(accel_cmd[jnt_name])
         return pnt
 
     def _command_stop(self, joint_names, joint_angles, start_time, dimensions_dict):
         if self._mode == 'velocity':
             velocities = [0.0] * len(joint_names)
-            cmd = dict(zip(joint_names, velocities))
+            cmd = dict(list(zip(joint_names, velocities)))
             while (not self._server.is_new_goal_available() and self._alive
                    and self.robot_is_enabled()):
                 self._limb.set_joint_velocities(cmd)
@@ -279,14 +279,14 @@ class JointTrajectoryActionServer(object):
                 velocities.append(self._pid[delta[0]].compute_output(delta[1]))
         if ((self._mode == 'position' or self._mode == 'position_w_id')
               and self._alive):
-            cmd = dict(zip(joint_names, point.positions))
+            cmd = dict(list(zip(joint_names, point.positions)))
             raw_pos_mode = (self._mode == 'position_w_id')
             self._limb.set_joint_positions(cmd, raw=raw_pos_mode)
             if raw_pos_mode:
                 ff_pnt = self._reorder_joints_ff_cmd(joint_names, point)
                 self._pub_ff_cmd.publish(ff_pnt)
         elif self._alive:
-            cmd = dict(zip(joint_names, velocities))
+            cmd = dict(list(zip(joint_names, velocities)))
             self._limb.set_joint_velocities(cmd)
         return True
 
@@ -318,7 +318,7 @@ class JointTrajectoryActionServer(object):
         num_traj_dim = sum(dimensions_dict.values())
         num_b_values = len(['b0', 'b1', 'b2', 'b3'])
         b_matrix = np.zeros(shape=(num_joints, num_traj_dim, num_traj_pts-1, num_b_values))
-        for jnt in xrange(num_joints):
+        for jnt in range(num_joints):
             traj_array = np.zeros(shape=(len(trajectory_points), num_traj_dim))
             for idx, point in enumerate(trajectory_points):
                 current_point = list()
@@ -429,9 +429,9 @@ class JointTrajectoryActionServer(object):
                 cmd_time = 0
                 t = 0
 
-	    point = self._get_bezier_point(b_matrix, idx,
+            point = self._get_bezier_point(b_matrix, idx,
                                            t, cmd_time,
-				           dimensions_dict)
+                                           dimensions_dict)
 
             # Command Joint Position, Velocity, Acceleration
             command_executed = self._command_joints(joint_names, point, start_time, dimensions_dict)
@@ -443,7 +443,7 @@ class JointTrajectoryActionServer(object):
         # Keep trying to meet goal until goal_time constraint expired
         last = trajectory_points[-1]
         last_time = trajectory_points[-1].time_from_start.to_sec()
-        end_angles = dict(zip(joint_names, last.positions))
+        end_angles = dict(list(zip(joint_names, last.positions)))
 
         def check_goal_state():
             for error in self._get_current_error(joint_names, last.positions):
